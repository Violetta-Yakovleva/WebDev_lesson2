// Напишите функцию, которая принимает строковый параметр и переворачивает каждое слово в строке. При этом все пробелы в строке должны остаться на своих местах

function reverseWords(str) {
    str = str.split(" ");
    var res = [];

    for (var i = 0; i < str.length; i++){
        res.push(str[i].split("").reverse().join(""));
    }
    return res.join(" ");
}

console.log(reverseWords("Абра кадабра!"));


// Тимми и Сара думают, что они влюблены, но у них в окрестностях, где они живут, они узнают это только после того, как каждый из них сорвет по одному цветку. Если у одного цветка четное количество лепестков, а у другого нечетное количество лепестков, то это означает, что они влюблены.

// Напишите функцию, которая примет количество лепестков каждого цветка в качестве аргументов и вернет True, если они влюблены, и False, если не влюблены.

let flover1 = 0;
let flover2 = 0;
function lovefunc(flower1, flower2){
    if((flover1 % 2 == 0 && flover2 % 2 != 0) || (flover2 % 2 == 0 && flover1 % 2 != 0))
        return true;
    else
        return false;
}
console.log(lovefunc(2, 2));


// Напишите функцию, которая принимает целое число в качестве аргумента и возвращает логическое значение True (истина) или False (ложь) в зависимости от того, является ли это число простым.
// Требования:
// Вы можете предполагать, что на вход будет дано целое число.
// Вы не можете предполагать, что число будет только положительным. Вам могут также дать отрицательные числа (или 0).
// Примечание о производительности: не требуются сложные оптимизации, но очень наивные решения могут привести к превышению времени выполнения. Числа могут быть до 2^31 (или аналогичные, в зависимости от языка программирования). Циклический перебор всех чисел от 1 до n или от 1 до n/2 будет слишком медленным.

function isPrime(num) {
    flag = true;
    for (i = 2; i < num/2; i++) {
        if (num % i == 0) {
            flag = false;
            break;
        }
    }
    return flag;
}
console.log(isPrime(13));
console.log(isPrime(22));






